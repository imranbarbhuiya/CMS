/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/audit-log': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all audit logs */
		get: operations['AuditLogController_getAll'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/leads': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get my leads */
		get: operations['LeadController_getAll'];
		put?: never;
		/** Create lead */
		post: operations['LeadController_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/leads/{id}/claim': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Claim Lead */
		post: operations['LeadController_claim'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/leads/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get lead by ID */
		get: operations['LeadController_getById'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Update lead */
		patch: operations['LeadController_update'];
		trace?: never;
	};
	'/leads/all': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all leads (admin) */
		get: operations['LeadController_getAllAdmin'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/teams': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all teams */
		get: operations['TeamController_getAll'];
		put?: never;
		/** Create team */
		post: operations['TeamController_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/teams/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get team by ID */
		get: operations['TeamController_getById'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Update team */
		patch: operations['TeamController_update'];
		trace?: never;
	};
	'/teams/{id}/delete': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Delete team */
		patch: operations['TeamController_delete'];
		trace?: never;
	};
	'/tickets': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all tickets */
		get: operations['TicketController_getAllAdmin'];
		put?: never;
		/** Create ticket */
		post: operations['TicketController_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/tickets/{id}/claim': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Claim ticket */
		post: operations['TicketController_claim'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/tickets/my': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get my tickets */
		get: operations['TicketController_getAll'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/tickets/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get ticket by ID */
		get: operations['TicketController_getById'];
		put?: never;
		post?: never;
		/** Delete ticket */
		delete: operations['TicketController_delete'];
		options?: never;
		head?: never;
		/** Update ticket */
		patch: operations['TicketController_update'];
		trace?: never;
	};
	'/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Login user */
		post: operations['UserController_login'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/register': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Register user */
		post: operations['UserController_register'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/logout': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Logout user */
		post: operations['UserController_logout'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/me': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get my user */
		get: operations['UserController_getMe'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/all': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Get all users */
		post: operations['UserController_getAll'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Get user by ID */
		post: operations['UserController_getById'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/{id}/update': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Update user */
		post: operations['UserController_update'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/{id}/delete': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Delete user */
		post: operations['UserController_delete'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/announcement': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create announcement */
		post: operations['UserController_createAnnouncement'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/announcements': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all my announcements */
		get: operations['UserController_getAnnouncements'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AuditLogsDto: {
			id: string;
			message: string;
			userId: string;
			/**
			 * @example 'user create' | 'user update' | 'user deleted' | 'user login' | 'user logout' | 'lead created' | 'lead updated' | 'lead deleted' | 'lead assigned' | 'lead unassigned' | 'lead status changed' | 'ticket created' | 'ticket updated' | 'ticket deleted' | 'ticket assigned' | 'ticket unassigned' | 'ticket status changed' | 'team created' | 'team updated' | 'team deleted' | 'team member added' | 'team member removed'
			 * @enum {string}
			 */
			action:
				| 'user create'
				| 'user update'
				| 'user deleted'
				| 'user login'
				| 'user logout'
				| 'lead created'
				| 'lead updated'
				| 'lead deleted'
				| 'lead assigned'
				| 'lead unassigned'
				| 'lead status changed'
				| 'ticket created'
				| 'ticket updated'
				| 'ticket deleted'
				| 'ticket assigned'
				| 'ticket unassigned'
				| 'ticket status changed'
				| 'team created'
				| 'team updated'
				| 'team deleted'
				| 'team member added'
				| 'team member removed';
			documentId?: string | null;
			createdAt: string;
			updatedAt: string;
		}[];
		ResponseDto: {
			message?: string;
			error?: string;
			statusCode?: number;
		};
		CreateLeadDto: {
			internalLeadId: string;
			name: string;
			email: string;
			phone: string;
			subscription: string;
			billingAddress: string;
			paymentMethod: string;
			/**
			 * @example 'Blue Company' | 'Red Company'
			 * @enum {string}
			 */
			leadSource: 'Blue Company' | 'Red Company';
			/** @description Refers to Ticket */
			ticketId?: string | null;
		};
		LeadDto: {
			id: string;
			internalLeadId: string;
			name: string;
			email: string;
			phone: string;
			subscription: string;
			billingAddress: string;
			paymentMethod: string;
			/**
			 * @example 'Blue Company' | 'Red Company'
			 * @enum {string}
			 */
			leadSource: 'Blue Company' | 'Red Company';
			/**
			 * @example 'New' | 'Customer Not Interested' | 'Voice Mail' | 'Not Reachable' | 'Duplicate Lead' | 'Sale Done' | 'Payment Pending'
			 * @enum {string}
			 */
			status:
				| 'New'
				| 'Customer Not Interested'
				| 'Voice Mail'
				| 'Not Reachable'
				| 'Duplicate Lead'
				| 'Sale Done'
				| 'Payment Pending';
			/** @description Refers to User */
			assignedTo?: string | null;
			/** @description Refers to Ticket */
			ticketId?: string | null;
			createdAt: string;
			updatedAt: string;
		};
		GetLeadsDto: {
			total: number;
			data: {
				id: string;
				internalLeadId: string;
				name: string;
				email: string;
				phone: string;
				subscription: string;
				billingAddress: string;
				paymentMethod: string;
				/**
				 * @example 'Blue Company' | 'Red Company'
				 * @enum {string}
				 */
				leadSource: 'Blue Company' | 'Red Company';
				/**
				 * @example 'New' | 'Customer Not Interested' | 'Voice Mail' | 'Not Reachable' | 'Duplicate Lead' | 'Sale Done' | 'Payment Pending'
				 * @enum {string}
				 */
				status:
					| 'New'
					| 'Customer Not Interested'
					| 'Voice Mail'
					| 'Not Reachable'
					| 'Duplicate Lead'
					| 'Sale Done'
					| 'Payment Pending';
				/** @description Refers to User */
				assignedTo?: string | null;
				/** @description Refers to Ticket */
				ticketId?: string | null;
				createdAt: string;
				updatedAt: string;
			}[];
		};
		UpdateLeadDto: {
			/**
			 * @example 'New' | 'Customer Not Interested' | 'Voice Mail' | 'Not Reachable' | 'Duplicate Lead' | 'Sale Done' | 'Payment Pending'
			 * @enum {string}
			 */
			status?:
				| 'New'
				| 'Customer Not Interested'
				| 'Voice Mail'
				| 'Not Reachable'
				| 'Duplicate Lead'
				| 'Sale Done'
				| 'Payment Pending';
		};
		CreateTeamDto: {
			name: string;
			description?: string | null;
			/**
			 * @example 'Blue Company' | 'Red Company'
			 * @enum {string}
			 */
			companyId: 'Blue Company' | 'Red Company';
		};
		UpdateTeamDto: {
			users: {
				/**
				 * @example 'Team Lead' | 'Sales Executive' | 'Service Executive'
				 * @enum {string}
				 */
				role: 'Team Lead' | 'Sales Executive' | 'Service Executive';
				/**
				 * @example 'Blue Company' | 'Red Company'
				 * @enum {string}
				 */
				companyId: 'Blue Company' | 'Red Company';
				/** @description Refers to User */
				userId: string;
			}[];
		};
		CreateTicketDto: {
			leadId: string;
			additionalInfo: string;
		};
		UpdateTicketDto: {
			/**
			 * @example 'Completed' | 'Pending' | 'Follow-Up'
			 * @enum {string}
			 */
			status?: 'Completed' | 'Pending' | 'Follow-Up';
		};
		LoginUserDto: {
			email: string;
			password: string;
		};
		UserDto: {
			id: string;
			name: string;
			email: string;
			password: string;
			/**
			 * @example 'SuperAdmin' | 'Manager' | 'User'
			 * @enum {string}
			 */
			role?: 'SuperAdmin' | 'Manager' | 'User';
			/** @description Refers to Team */
			team?: string | null;
			accessToken?: string | null;
			createdAt: string;
			updatedAt: string;
		};
		RegisterUserDto: {
			email: string;
			password: string;
			name: string;
		};
		UsersDto: {
			id: string;
			name: string;
			email: string;
			password: string;
			/**
			 * @example 'SuperAdmin' | 'Manager' | 'User'
			 * @enum {string}
			 */
			role?: 'SuperAdmin' | 'Manager' | 'User';
			/** @description Refers to Team */
			team?: string | null;
			accessToken?: string | null;
			createdAt: string;
			updatedAt: string;
		}[];
		UpdateUserDto: {
			email?: string;
			password?: string;
			name?: string;
			/**
			 * @example 'SuperAdmin' | 'Manager' | 'User'
			 * @enum {string}
			 */
			role?: 'SuperAdmin' | 'Manager' | 'User';
		};
		AnnouncementsDto: {
			id: string;
			content: string;
			/** @description Refers to User */
			from: string;
			/** @description Refers to User */
			to: string[];
			createdAt: string;
		}[];
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	AuditLogController_getAll: {
		parameters: {
			query: {
				userId: string;
			};
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuditLogsDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_getAll: {
		parameters: {
			query?: {
				search?: string;
				page?: number;
				limit?: number;
			};
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetLeadsDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_create: {
		parameters: {
			query: {
				key: string;
				Company: 'Blue Company' | 'Red Company';
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateLeadDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['LeadDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_claim: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_getById: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_update: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateLeadDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	LeadController_getAllAdmin: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TeamController_getAll: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TeamController_create: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateTeamDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TeamController_getById: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TeamController_update: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateTeamDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TeamController_delete: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_getAllAdmin: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_create: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateTicketDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_claim: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_getAll: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_getById: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_delete: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	TicketController_update: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateTicketDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_login: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['LoginUserDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_register: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['RegisterUserDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_logout: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_getMe: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_getAll: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UsersDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_getById: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_update: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateUserDto'];
			};
		};
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_delete: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_createAnnouncement: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
	UserController_getAnnouncements: {
		parameters: {
			query?: never;
			header: {
				/** @description Bearer <Token> */
				Authorization: string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns success if request is successful */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AnnouncementsDto'];
				};
			};
			/** @description Returns error if validation fails */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Forbidden */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Not Found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
			/** @description Internal Server Error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ResponseDto'];
				};
			};
		};
	};
}
